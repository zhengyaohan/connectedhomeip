/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

#include <crypto/CHIPCryptoPAL.h>
#include <lib/core/CHIPError.h>
#include <lib/support/Base64.h>
#include <lib/support/BytesToHex.h>
#include <lib/support/Span.h>
#include <platform/Beken/CHIPDevicePlatformConfig.h>
#include <platform/CHIPDeviceConfig.h>
#include <platform/CHIPDeviceLayer.h>
#include <platform/ConnectivityManager.h>

#include <platform/internal/GenericConfigurationManagerImpl.ipp>

#include <platform/Beken/BekenConfig.h>
#include <platform/Beken/FactoryDataProvider.h>

using namespace ::chip::DeviceLayer::Internal;

namespace chip {
namespace DeviceLayer {

// TODO: This should be moved to a method of P256Keypair
CHIP_ERROR LoadKeypairFromRaw(ByteSpan private_key, ByteSpan public_key, Crypto::P256Keypair & keypair)
{
    Crypto::P256SerializedKeypair serialized_keypair;
    ReturnErrorOnFailure(serialized_keypair.SetLength(private_key.size() + public_key.size()));
    memcpy(serialized_keypair.Bytes(), public_key.data(), public_key.size());
    memcpy(serialized_keypair.Bytes() + public_key.size(), private_key.data(), private_key.size());
    return keypair.Deserialize(serialized_keypair);
}

CHIP_ERROR FactoryDataProvider::GetCertificationDeclaration(MutableByteSpan & outBuffer)
{
    // TODO: CD is Hardcoded temporarily, will read from flash/efuse in the future

    //-> format_version = 1
    //-> vendor_id = 0xFFF1
    //-> product_id_array = [ 0x8000, 0x8001, 0x8002, 0x8003, 0x8004, 0x8005, 0x8006, 0x8007, 0x8008, 0x8009, 0x800A, 0x800B,
    // 0x800C, 0x800D, 0x800E, 0x800F, 0x8010, 0x8011, 0x8012, 0x8013, 0x8014, 0x8015, 0x8016, 0x8017, 0x8018, 0x8019, 0x801A,
    // 0x801B, 0x801C, 0x801D, 0x801E, 0x801F, 0x8020, 0x8021, 0x8022, 0x8023, 0x8024, 0x8025, 0x8026, 0x8027, 0x8028, 0x8029,
    // 0x802A, 0x802B, 0x802C, 0x802D, 0x802E, 0x802F, 0x8030, 0x8031, 0x8032, 0x8033, 0x8034, 0x8035, 0x8036, 0x8037, 0x8038,
    // 0x8039, 0x803A, 0x803B, 0x803C, 0x803D, 0x803E, 0x803F, 0x8040, 0x8041, 0x8042, 0x8043, 0x8044, 0x8045, 0x8046, 0x8047,
    // 0x8048, 0x8049, 0x804A, 0x804B, 0x804C, 0x804D, 0x804E, 0x804F, 0x8050, 0x8051, 0x8052, 0x8053, 0x8054, 0x8055, 0x8056,
    // 0x8057, 0x8058, 0x8059, 0x805A, 0x805B, 0x805C, 0x805D, 0x805E, 0x805F, 0x8060, 0x8061, 0x8062, 0x8063 ]
    //-> device_type_id = 0x0016
    //-> certificate_id = "ZIG20142ZB330003-24"
    //-> security_level = 0
    //-> security_information = 0
    //-> version_number = 0x2694
    //-> certification_type = 0
    //-> dac_origin_vendor_id is not present
    //-> dac_origin_product_id is not present

#if CHIP_DEVICE_CONFIG_ENABLE_TEST_SETUP_PARAMS
    const uint8_t kCdForAllExamples[246] = {
        0x30, 0x81, 0xf3, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
        0x07, 0x02, 0xa0, 0x81, 0xe5, 0x30, 0x81, 0xe2, 0x02, 0x01, 0x03, 0x31,
        0x0d, 0x30, 0x0b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04,
        0x02, 0x01, 0x30, 0x4f, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
        0x01, 0x07, 0x01, 0xa0, 0x42, 0x04, 0x40, 0x15, 0x24, 0x00, 0x01, 0x25,
        0x01, 0x42, 0x13, 0x36, 0x02, 0x05, 0xe8, 0x03, 0x05, 0xe9, 0x03, 0x18,
        0x25, 0x03, 0x00, 0x01, 0x2c, 0x04, 0x13, 0x5a, 0x49, 0x47, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x24, 0x05, 0x00, 0x24, 0x06, 0x00, 0x24, 0x07, 0x01, 0x24,
        0x08, 0x01, 0x25, 0x09, 0x42, 0x13, 0x25, 0x0a, 0xe9, 0x03, 0x18, 0x31,
        0x7d, 0x30, 0x7b, 0x02, 0x01, 0x03, 0x80, 0x14, 0x62, 0xfa, 0x82, 0x33,
        0x59, 0xac, 0xfa, 0xa9, 0x96, 0x3e, 0x1c, 0xfa, 0x14, 0x0a, 0xdd, 0xf5,
        0x04, 0xf3, 0x71, 0x60, 0x30, 0x0b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01,
        0x65, 0x03, 0x04, 0x02, 0x01, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48,
        0xce, 0x3d, 0x04, 0x03, 0x02, 0x04, 0x47, 0x30, 0x45, 0x02, 0x20, 0x25,
        0x7c, 0x02, 0xf3, 0xc5, 0x65, 0xb3, 0x7b, 0x76, 0xd6, 0x23, 0xc1, 0x3c,
        0xaa, 0x07, 0xb3, 0x20, 0xda, 0x54, 0xc0, 0xec, 0x75, 0xe9, 0x4d, 0xde,
        0x79, 0x57, 0x95, 0x82, 0xf5, 0x95, 0xb3, 0x02, 0x21, 0x00, 0xf1, 0x98,
        0xa0, 0xe0, 0x93, 0x06, 0xdd, 0xe5, 0x4a, 0xad, 0x9b, 0xb6, 0x07, 0x9d,
        0x5e, 0xec, 0xbe, 0x4d, 0x97, 0xc1, 0xba, 0x1f, 0x1b, 0xd5, 0xd5, 0x85,
        0xf4, 0x79, 0x6c, 0xd1, 0xc6, 0xa5
    };

    return CopySpanToMutableSpan(ByteSpan(kCdForAllExamples), outBuffer);
#else
    uint8_t buf[300] = { 0 };
    size_t bufLen = 0;
    ReturnErrorOnFailure(BekenConfig::ReadConfigValueBin(BekenConfig::kConfigKey_CertDeclaration, buf, 300, bufLen));
    ReturnErrorCodeIf(300 == bufLen, CHIP_ERROR_BUFFER_TOO_SMALL);
    return CopySpanToMutableSpan(ByteSpan(buf, bufLen), outBuffer);
#endif
}

CHIP_ERROR FactoryDataProvider::GetFirmwareInformation(MutableByteSpan & out_firmware_info_buffer)
{
    // TODO: We need a real example FirmwareInformation to be populated.
    out_firmware_info_buffer.reduce_size(0);

    return CHIP_NO_ERROR;
}

CHIP_ERROR FactoryDataProvider::GetDeviceAttestationCert(MutableByteSpan & outBuffer)
{
    // TODO: DAC is Hardcoded temporarily, will read from flash/efuse in the future

#if CHIP_DEVICE_CONFIG_ENABLE_TEST_SETUP_PARAMS
    const uint8_t kDacCert[488] = {
        0x30, 0x82, 0x01, 0xe4, 0x30, 0x82, 0x01, 0x8b, 0xa0, 0x03, 0x02, 0x01,
        0x02, 0x02, 0x08, 0x5d, 0x2f, 0x83, 0xa0, 0x0b, 0xd0, 0x79, 0x14, 0x30,
        0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30,
        0x39, 0x31, 0x21, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x18,
        0x42, 0x65, 0x6b, 0x65, 0x6e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
        0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x50, 0x41, 0x49, 0x20, 0x30, 0x31,
        0x31, 0x14, 0x30, 0x12, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82,
        0xa2, 0x7c, 0x02, 0x01, 0x0c, 0x04, 0x31, 0x33, 0x34, 0x32, 0x30, 0x1e,
        0x17, 0x0d, 0x32, 0x32, 0x31, 0x30, 0x31, 0x30, 0x31, 0x34, 0x32, 0x33,
        0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x32, 0x31, 0x30, 0x31, 0x30, 0x31,
        0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x56, 0x31, 0x28, 0x30, 0x26,
        0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1f, 0x42, 0x65, 0x6b, 0x65, 0x6e,
        0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74,
        0x20, 0x44, 0x41, 0x43, 0x20, 0x42, 0x4b, 0x37, 0x32, 0x33, 0x35, 0x20,
        0x30, 0x31, 0x31, 0x14, 0x30, 0x12, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04,
        0x01, 0x82, 0xa2, 0x7c, 0x02, 0x01, 0x0c, 0x04, 0x31, 0x33, 0x34, 0x32,
        0x31, 0x14, 0x30, 0x12, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82,
        0xa2, 0x7c, 0x02, 0x02, 0x0c, 0x04, 0x30, 0x33, 0x45, 0x39, 0x30, 0x59,
        0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06,
        0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00,
        0x04, 0x8b, 0xf3, 0x8a, 0x5a, 0xab, 0x86, 0xa6, 0x55, 0x78, 0xb7, 0x13,
        0x62, 0x57, 0x08, 0x12, 0xef, 0xb4, 0xf5, 0xd3, 0x3b, 0xa3, 0x01, 0x02,
        0xaf, 0x6f, 0xf8, 0x6e, 0xb9, 0x4f, 0xc6, 0x74, 0x4b, 0x17, 0xc2, 0x5f,
        0x83, 0x31, 0x4e, 0xcc, 0x93, 0xd9, 0x01, 0x45, 0xb2, 0xff, 0x38, 0x21,
        0x16, 0x52, 0x15, 0x43, 0xd7, 0xdd, 0xa5, 0x09, 0x4d, 0xe0, 0xa0, 0x36,
        0x40, 0x2f, 0xc0, 0xa0, 0x77, 0xa3, 0x60, 0x30, 0x5e, 0x30, 0x0c, 0x06,
        0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30,
        0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03,
        0x02, 0x07, 0x80, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16,
        0x04, 0x14, 0xf2, 0x28, 0x6d, 0x1f, 0x5f, 0xb1, 0xee, 0xca, 0x43, 0x78,
        0x7d, 0xae, 0x47, 0xc5, 0x65, 0x1a, 0x53, 0x4a, 0x11, 0xbb, 0x30, 0x1f,
        0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xaa,
        0x55, 0xf0, 0xc1, 0xa1, 0x09, 0x62, 0xd2, 0xd6, 0xfc, 0x30, 0x36, 0x42,
        0xc8, 0x13, 0x2d, 0x7c, 0xaa, 0xdb, 0xd5, 0x30, 0x0a, 0x06, 0x08, 0x2a,
        0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44,
        0x02, 0x20, 0x21, 0x0f, 0x6c, 0x94, 0x5d, 0x6f, 0x8c, 0x28, 0x97, 0x21,
        0x5d, 0x00, 0x88, 0x93, 0x86, 0x80, 0x33, 0xdf, 0x78, 0x1c, 0x7f, 0x1c,
        0xd5, 0xf3, 0x6e, 0x5b, 0x27, 0xd3, 0xfd, 0x02, 0x2c, 0x36, 0x02, 0x20,
        0x01, 0xba, 0x11, 0x82, 0xe2, 0x3f, 0x6a, 0x41, 0xac, 0xef, 0x4d, 0xac,
        0x05, 0x21, 0xf1, 0xed, 0xe1, 0x2d, 0x2c, 0xb2, 0xec, 0x96, 0x56, 0x82,
        0x7e, 0x39, 0x96, 0x88, 0x3a, 0x6f, 0x02, 0xb3
    };
    return CopySpanToMutableSpan(ByteSpan(kDacCert), outBuffer);
#else
    uint8_t buf[500] = { 0 };
    size_t bufLen = 0;
    ReturnErrorOnFailure(BekenConfig::ReadConfigValueBin(BekenConfig::kConfigKey_DACCert, buf, 500, bufLen));
    ReturnErrorCodeIf(500 == bufLen, CHIP_ERROR_BUFFER_TOO_SMALL);
    return CopySpanToMutableSpan(ByteSpan(buf, bufLen), outBuffer);
#endif
}

CHIP_ERROR FactoryDataProvider::GetProductAttestationIntermediateCert(MutableByteSpan & outBuffer)
{
    // TODO: PAI is Hardcoded temporarily, will read from flash/efuse in the future

#if CHIP_DEVICE_CONFIG_ENABLE_TEST_SETUP_PARAMS
    const uint8_t kPaiCert[465] = {
        0x30, 0x82, 0x01, 0xcd, 0x30, 0x82, 0x01, 0x74, 0xa0, 0x03, 0x02, 0x01,
        0x02, 0x02, 0x08, 0x3e, 0xf1, 0xc5, 0xd3, 0xf1, 0x2e, 0xfb, 0xd7, 0x30,
        0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30,
        0x39, 0x31, 0x21, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x18,
        0x42, 0x65, 0x6b, 0x65, 0x6e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
        0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x50, 0x41, 0x41, 0x20, 0x30, 0x31,
        0x31, 0x14, 0x30, 0x12, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82,
        0xa2, 0x7c, 0x02, 0x01, 0x0c, 0x04, 0x31, 0x33, 0x34, 0x32, 0x30, 0x1e,
        0x17, 0x0d, 0x32, 0x32, 0x31, 0x30, 0x31, 0x30, 0x31, 0x34, 0x32, 0x33,
        0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x32, 0x31, 0x30, 0x31, 0x30, 0x31,
        0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x39, 0x31, 0x21, 0x30, 0x1f,
        0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x18, 0x42, 0x65, 0x6b, 0x65, 0x6e,
        0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74,
        0x20, 0x50, 0x41, 0x49, 0x20, 0x30, 0x31, 0x31, 0x14, 0x30, 0x12, 0x06,
        0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x02, 0x01, 0x0c,
        0x04, 0x31, 0x33, 0x34, 0x32, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a,
        0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,
        0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xe1, 0x59, 0xad, 0x59,
        0xd7, 0xb1, 0xb5, 0x1a, 0x51, 0x3b, 0x5e, 0xc4, 0xe0, 0xef, 0x47, 0x5a,
        0x2d, 0xba, 0x40, 0x75, 0xaa, 0xd0, 0xbe, 0x03, 0x15, 0x0e, 0x97, 0xc6,
        0x7c, 0x3a, 0xd5, 0x1d, 0x43, 0x63, 0x92, 0x2b, 0x37, 0x66, 0x9f, 0x24,
        0xc6, 0x77, 0x5f, 0xd0, 0xb0, 0xf0, 0x75, 0xd6, 0xc5, 0xc9, 0xc2, 0x74,
        0x09, 0x0b, 0xf3, 0x2a, 0x39, 0xfa, 0x39, 0xe3, 0x5b, 0xab, 0x43, 0x37,
        0xa3, 0x66, 0x30, 0x64, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01,
        0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xff, 0x02, 0x01, 0x00,
        0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04,
        0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04,
        0x16, 0x04, 0x14, 0xaa, 0x55, 0xf0, 0xc1, 0xa1, 0x09, 0x62, 0xd2, 0xd6,
        0xfc, 0x30, 0x36, 0x42, 0xc8, 0x13, 0x2d, 0x7c, 0xaa, 0xdb, 0xd5, 0x30,
        0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
        0xc2, 0xbc, 0xd6, 0x40, 0xf3, 0xf5, 0xea, 0xa1, 0x7a, 0xec, 0x46, 0x6a,
        0x4b, 0x69, 0x48, 0xb9, 0x6a, 0xcd, 0x0d, 0x7a, 0x30, 0x0a, 0x06, 0x08,
        0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30,
        0x44, 0x02, 0x20, 0x33, 0x4d, 0x90, 0xaa, 0xfb, 0x59, 0x1a, 0xc4, 0xc5,
        0x3b, 0xfd, 0x51, 0x4b, 0x87, 0x9b, 0xd2, 0x6c, 0x5d, 0x1f, 0x8a, 0x04,
        0x6e, 0x81, 0x7b, 0x24, 0x6f, 0x92, 0xd9, 0x13, 0x67, 0x16, 0xc5, 0x02,
        0x20, 0x1b, 0xc3, 0xf7, 0x78, 0x27, 0x35, 0xea, 0x21, 0x80, 0xc1, 0x38,
        0x8d, 0x3d, 0xe6, 0x8f, 0xf1, 0xe6, 0x4f, 0xe6, 0xf8, 0x8d, 0x0c, 0x73,
        0xeb, 0xaa, 0xea, 0x55, 0xf0, 0x79, 0xeb, 0x88, 0xd3
    };
    return CopySpanToMutableSpan(ByteSpan{ kPaiCert }, outBuffer);
#else
    uint8_t buf[500] = { 0 };
    size_t bufLen = 0;
    ReturnErrorOnFailure(BekenConfig::ReadConfigValueBin(BekenConfig::kConfigKey_PAICert, buf, 500, bufLen));
    ReturnErrorCodeIf(500 == bufLen, CHIP_ERROR_BUFFER_TOO_SMALL);
    return CopySpanToMutableSpan(ByteSpan(buf, bufLen), outBuffer);
#endif
}

CHIP_ERROR FactoryDataProvider::SignWithDeviceAttestationKey(const ByteSpan & messageToSign, MutableByteSpan & outSignBuffer)
{
    // TODO: DAC keys are Hardcoded temporarily, will read from flash/efuse in the future

#if CHIP_DEVICE_CONFIG_ENABLE_TEST_SETUP_PARAMS
    const uint8_t kDacPublicKey[65] = {
        0x04, 0x8b, 0xf3, 0x8a, 0x5a, 0xab, 0x86, 0xa6, 0x55, 0x78, 0xb7, 0x13, 0x62, 0x57, 0x08,
        0x12, 0xef, 0xb4, 0xf5, 0xd3, 0x3b, 0xa3, 0x01, 0x02, 0xaf, 0x6f, 0xf8, 0x6e, 0xb9, 0x4f,
        0xc6, 0x74, 0x4b, 0x17, 0xc2, 0x5f, 0x83, 0x31, 0x4e, 0xcc, 0x93, 0xd9, 0x01, 0x45, 0xb2,
        0xff, 0x38, 0x21, 0x16, 0x52, 0x15, 0x43, 0xd7, 0xdd, 0xa5, 0x09, 0x4d, 0xe0, 0xa0, 0x36,
        0x40, 0x2f, 0xc0, 0xa0, 0x77
    };

    const uint8_t kDacPrivateKey[32] = {
        0x7e, 0x2e, 0x68, 0xe6, 0x33, 0x6b, 0x9f, 0xd2, 0x11, 0x11, 0xd0, 0xe6, 0xfa, 0xb2, 0x18,
        0x09, 0x4e, 0xe7, 0x06, 0xec, 0x4b, 0x48, 0xbb, 0xb9, 0x1c, 0x8b, 0x4c, 0xf4, 0xba, 0x6e,
        0x75, 0x67
    };
    size_t kDacPublicKeyLen = 65, kDacPrivateKeyLen = 32;
#else
    size_t kDacPublicKeyLen = 0, kDacPrivateKeyLen = 0;
    uint8_t kDacPrivateKey[100] = { 0 }, kDacPublicKey[100] = { 0 };
    ReturnErrorOnFailure(BekenConfig::ReadConfigValueBin(BekenConfig::kConfigKey_DACPublicKey, kDacPublicKey, 100, kDacPublicKeyLen));
    ReturnErrorOnFailure(BekenConfig::ReadConfigValueBin(BekenConfig::kConfigKey_DACPrivateKey, kDacPrivateKey, 100, kDacPrivateKeyLen));
    ReturnErrorCodeIf(100 == kDacPrivateKeyLen, CHIP_ERROR_BUFFER_TOO_SMALL);
    ReturnErrorCodeIf(100 == kDacPublicKeyLen, CHIP_ERROR_BUFFER_TOO_SMALL);

#endif

    Crypto::P256ECDSASignature signature;
    Crypto::P256Keypair keypair;

    VerifyOrReturnError(IsSpanUsable(outSignBuffer), CHIP_ERROR_INVALID_ARGUMENT);
    VerifyOrReturnError(IsSpanUsable(messageToSign), CHIP_ERROR_INVALID_ARGUMENT);
    VerifyOrReturnError(outSignBuffer.size() >= signature.Capacity(), CHIP_ERROR_BUFFER_TOO_SMALL);

    // In a non-exemplary implementation, the public key is not needed here. It is used here merely because
    // Crypto::P256Keypair is only (currently) constructable from raw keys if both private/public keys are present.
    ReturnErrorOnFailure( LoadKeypairFromRaw(ByteSpan(kDacPrivateKey, kDacPrivateKeyLen), ByteSpan(kDacPublicKey, kDacPublicKeyLen), keypair));
    ReturnErrorOnFailure(keypair.ECDSA_sign_msg(messageToSign.data(), messageToSign.size(), signature));

    return CopySpanToMutableSpan(ByteSpan{ signature.ConstBytes(), signature.Length() }, outSignBuffer);
}

CHIP_ERROR FactoryDataProvider::GetSetupDiscriminator(uint16_t & setupDiscriminator)
{
    CHIP_ERROR err = CHIP_DEVICE_ERROR_CONFIG_NOT_FOUND;
    uint16_t val;

#if CHIP_DEVICE_CONFIG_ENABLE_TEST_SETUP_PARAMS //defined(CHIP_DEVICE_CONFIG_USE_TEST_SETUP_DISCRIMINATOR) && CHIP_DEVICE_CONFIG_USE_TEST_SETUP_DISCRIMINATOR
    val = CHIP_DEVICE_CONFIG_USE_TEST_SETUP_DISCRIMINATOR;
    err = CHIP_NO_ERROR;
#else
    ReturnErrorOnFailure(BekenConfig::ReadConfigValue(BekenConfig::kConfigKey_SetupDiscriminator, val));
#endif // defined(CHIP_DEVICE_CONFIG_USE_TEST_SETUP_DISCRIMINATOR) && CHIP_DEVICE_CONFIG_USE_TEST_SETUP_DISCRIMINATOR

    setupDiscriminator = static_cast<uint16_t>(val);
    VerifyOrReturnLogError(setupDiscriminator <= kMaxDiscriminatorValue, CHIP_ERROR_INVALID_ARGUMENT);

    return err;
}

CHIP_ERROR FactoryDataProvider::SetSetupDiscriminator(uint16_t setupDiscriminator)
{
#if defined(CHIP_DEVICE_CONFIG_USE_TEST_SETUP_DISCRIMINATOR) && CHIP_DEVICE_CONFIG_USE_TEST_SETUP_DISCRIMINATOR
    CHIP_ERROR err = CHIP_ERROR_NOT_IMPLEMENTED;
#else
    ReturnErrorOnFailure(BekenConfig::WriteConfigValue(BekenConfig::kConfigKey_SetupDiscriminator, setupDiscriminator));
#endif // defined(CHIP_DEVICE_CONFIG_USE_TEST_SETUP_DISCRIMINATOR) && CHIP_DEVICE_CONFIG_USE_TEST_SETUP_DISCRIMINATOR

    return CHIP_ERROR_NOT_IMPLEMENTED;
}

CHIP_ERROR FactoryDataProvider::GetSpake2pIterationCount(uint32_t & iterationCount)
{
    CHIP_ERROR err = CHIP_DEVICE_ERROR_CONFIG_NOT_FOUND;

#if defined(CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_ITERATION_COUNT) && CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_ITERATION_COUNT
    iterationCount = CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_ITERATION_COUNT;
    err            = CHIP_NO_ERROR;
#else
    ReturnErrorOnFailure(BekenConfig::ReadConfigValue(BekenConfig::kConfigKey_Spake2pIterationCount, iterationCount));
#endif // defined(CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_ITERATION_COUNT) && CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_ITERATION_COUNT

    return err;
}

CHIP_ERROR FactoryDataProvider::GetSpake2pSalt(MutableByteSpan & saltBuf)
{
    static constexpr size_t kSpake2pSalt_MaxBase64Len = BASE64_ENCODED_LEN(chip::Crypto::kSpake2p_Max_PBKDF_Salt_Length) + 1;

    CHIP_ERROR err                          = CHIP_DEVICE_ERROR_CONFIG_NOT_FOUND;
    char saltB64[kSpake2pSalt_MaxBase64Len] = { 0 };
    size_t saltB64Len                       = 0;

#if defined(CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_SALT)
    saltB64Len = strlen(CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_SALT);
    ReturnErrorCodeIf(saltB64Len > sizeof(saltB64), CHIP_ERROR_BUFFER_TOO_SMALL);
    memcpy(saltB64, CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_SALT, saltB64Len);
    err = CHIP_NO_ERROR;
#else
    err = BekenConfig::ReadConfigValueStr(BekenConfig::kConfigKey_Spake2pSalt, saltB64, sizeof(saltB64), saltB64Len);
#endif // defined(CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_SALT)

    ReturnErrorOnFailure(err);
    size_t saltLen = chip::Base64Decode32(saltB64, saltB64Len, reinterpret_cast<uint8_t *>(saltB64));

    ReturnErrorCodeIf(saltLen > saltBuf.size(), CHIP_ERROR_BUFFER_TOO_SMALL);
    memcpy(saltBuf.data(), saltB64, saltLen);
    saltBuf.reduce_size(saltLen);

    return CHIP_NO_ERROR;
}

CHIP_ERROR FactoryDataProvider::GetSpake2pVerifier(MutableByteSpan & verifierBuf, size_t & verifierLen)
{
    static constexpr size_t kSpake2pSerializedVerifier_MaxBase64Len =
        BASE64_ENCODED_LEN(chip::Crypto::kSpake2p_VerifierSerialized_Length) + 1;

    CHIP_ERROR err                                            = CHIP_DEVICE_ERROR_CONFIG_NOT_FOUND;
    char verifierB64[kSpake2pSerializedVerifier_MaxBase64Len] = { 0 };
    size_t verifierB64Len                                     = 0;

#if defined(CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_VERIFIER)
    verifierB64Len = strlen(CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_VERIFIER);
    ReturnErrorCodeIf(verifierB64Len > sizeof(verifierB64), CHIP_ERROR_BUFFER_TOO_SMALL);
    memcpy(verifierB64, CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_VERIFIER, verifierB64Len);
    err = CHIP_NO_ERROR;
#else
    err = BekenConfig::ReadConfigValueStr(BekenConfig::kConfigKey_Spake2pVerifier, verifierB64, sizeof(verifierB64), verifierB64Len);
#endif // defined(CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_VERIFIER)

    ReturnErrorOnFailure(err);
    verifierLen = chip::Base64Decode32(verifierB64, verifierB64Len, reinterpret_cast<uint8_t *>(verifierB64));
    ReturnErrorCodeIf(verifierLen > verifierBuf.size(), CHIP_ERROR_BUFFER_TOO_SMALL);
    memcpy(verifierBuf.data(), verifierB64, verifierLen);
    verifierBuf.reduce_size(verifierLen);

    return err;
}

CHIP_ERROR FactoryDataProvider::GetSetupPasscode(uint32_t & setupPasscode)
{
    CHIP_ERROR err = CHIP_DEVICE_ERROR_CONFIG_NOT_FOUND;

#if CHIP_DEVICE_CONFIG_ENABLE_TEST_SETUP_PARAMS //defined(CHIP_DEVICE_CONFIG_USE_TEST_SETUP_PIN_CODE) && CHIP_DEVICE_CONFIG_USE_TEST_SETUP_PIN_CODE
    setupPasscode = CHIP_DEVICE_CONFIG_USE_TEST_SETUP_PIN_CODE;
    err           = CHIP_NO_ERROR;
#else
    err = BekenConfig::ReadConfigValue(BekenConfig::kConfigKey_SetupPinCode, setupPasscode);
#endif // defined(CHIP_DEVICE_CONFIG_USE_TEST_SETUP_PIN_CODE) && CHIP_DEVICE_CONFIG_USE_TEST_SETUP_PIN_CODE

    return err;
}

CHIP_ERROR FactoryDataProvider::SetSetupPasscode(uint32_t setupPasscode)
{
    return CHIP_ERROR_NOT_IMPLEMENTED;
}

CHIP_ERROR FactoryDataProvider::GetVendorName(char * buf, size_t bufSize)
{
#if CHIP_DEVICE_CONFIG_ENABLE_TEST_SETUP_PARAMS
    ReturnErrorCodeIf(bufSize < sizeof(CHIP_DEVICE_CONFIG_DEVICE_VENDOR_NAME), CHIP_ERROR_BUFFER_TOO_SMALL);
    strcpy(buf, CHIP_DEVICE_CONFIG_DEVICE_VENDOR_NAME);
#else
    size_t bufSizeOut;
    ReturnErrorOnFailure(BekenConfig::ReadConfigValueStr(BekenConfig::kConfigKey_VendorName, buf, bufSize, bufSizeOut));
    ReturnErrorCodeIf(bufSize < bufSizeOut, CHIP_ERROR_BUFFER_TOO_SMALL);
#endif
    return CHIP_NO_ERROR;
}

CHIP_ERROR FactoryDataProvider::GetVendorId(uint16_t & vendorId)
{
#if CHIP_DEVICE_CONFIG_ENABLE_TEST_SETUP_PARAMS
    vendorId = static_cast<uint16_t>(CHIP_DEVICE_CONFIG_DEVICE_VENDOR_ID);
#else
    ReturnErrorOnFailure(BekenConfig::ReadConfigValue(BekenConfig::kConfigKey_VendorId, vendorId));
#endif
    return CHIP_NO_ERROR;
}

CHIP_ERROR FactoryDataProvider::GetProductName(char * buf, size_t bufSize)
{
#if CHIP_DEVICE_CONFIG_ENABLE_TEST_SETUP_PARAMS
    ReturnErrorCodeIf(bufSize < sizeof(CHIP_DEVICE_CONFIG_DEVICE_PRODUCT_NAME), CHIP_ERROR_BUFFER_TOO_SMALL);
    strcpy(buf, CHIP_DEVICE_CONFIG_DEVICE_PRODUCT_NAME);
#else
    size_t bufSizeOut;
    ReturnErrorOnFailure(BekenConfig::ReadConfigValueStr(BekenConfig::kConfigKey_ProductName, buf, bufSize, bufSizeOut));
    ReturnErrorCodeIf(bufSize < bufSizeOut, CHIP_ERROR_BUFFER_TOO_SMALL);
#endif
    return CHIP_NO_ERROR;
}

CHIP_ERROR FactoryDataProvider::GetProductId(uint16_t & productId)
{
#if CHIP_DEVICE_CONFIG_ENABLE_TEST_SETUP_PARAMS
    productId = static_cast<uint16_t>(CHIP_DEVICE_CONFIG_DEVICE_PRODUCT_ID);
#else
    ReturnErrorOnFailure(BekenConfig::ReadConfigValue(BekenConfig::kConfigKey_ProductId, productId));
#endif
    return CHIP_NO_ERROR;
}

CHIP_ERROR FactoryDataProvider::GetSerialNumber(char * buf, size_t bufSize)
{
    ChipError err       = CHIP_DEVICE_ERROR_CONFIG_NOT_FOUND;
    size_t serialNumLen = 0; // without counting null-terminator

#if CHIP_DEVICE_CONFIG_ENABLE_TEST_SETUP_PARAMS
#ifdef CHIP_DEVICE_CONFIG_TEST_SERIAL_NUMBER
    if (CHIP_DEVICE_CONFIG_TEST_SERIAL_NUMBER[0] != 0)
    {
        ReturnErrorCodeIf(sizeof(CHIP_DEVICE_CONFIG_TEST_SERIAL_NUMBER) > bufSize, CHIP_ERROR_BUFFER_TOO_SMALL);
        memcpy(buf, CHIP_DEVICE_CONFIG_TEST_SERIAL_NUMBER, sizeof(CHIP_DEVICE_CONFIG_TEST_SERIAL_NUMBER));
        serialNumLen = sizeof(CHIP_DEVICE_CONFIG_TEST_SERIAL_NUMBER) - 1;
        err          = CHIP_NO_ERROR;
    }
#endif // CHIP_DEVICE_CONFIG_TEST_SERIAL_NUMBER

    ReturnErrorCodeIf(serialNumLen >= bufSize, CHIP_ERROR_BUFFER_TOO_SMALL);
    ReturnErrorCodeIf(buf[serialNumLen] != 0, CHIP_ERROR_INVALID_STRING_LENGTH);
#else
    ReturnErrorOnFailure(BekenConfig::ReadConfigValueStr(BekenConfig::kConfigKey_SerialNum, buf, bufSize, serialNumLen));
    ReturnErrorCodeIf(bufSize < serialNumLen, CHIP_ERROR_BUFFER_TOO_SMALL);
    err = CHIP_NO_ERROR;

#endif
    return err;
}

CHIP_ERROR FactoryDataProvider::GetManufacturingDate(uint16_t & year, uint8_t & month, uint8_t & day)
{
    return CHIP_ERROR_NOT_IMPLEMENTED;
}

CHIP_ERROR FactoryDataProvider::GetHardwareVersion(uint16_t & hardwareVersion)
{
    return CHIP_ERROR_NOT_IMPLEMENTED;
}

CHIP_ERROR FactoryDataProvider::GetHardwareVersionString(char * buf, size_t bufSize)
{
    ReturnErrorCodeIf(bufSize < sizeof(CHIP_DEVICE_CONFIG_DEFAULT_DEVICE_HARDWARE_VERSION_STRING), CHIP_ERROR_BUFFER_TOO_SMALL);
    strcpy(buf, CHIP_DEVICE_CONFIG_DEFAULT_DEVICE_HARDWARE_VERSION_STRING);
    return CHIP_NO_ERROR;
}

CHIP_ERROR FactoryDataProvider::GetRotatingDeviceIdUniqueId(MutableByteSpan & uniqueIdSpan)
{
    ChipError err = CHIP_ERROR_WRONG_KEY_TYPE;
#if CHIP_ENABLE_ROTATING_DEVICE_ID && defined(CHIP_DEVICE_CONFIG_ROTATING_DEVICE_ID_UNIQUE_ID)
    static_assert(ConfigurationManager::kRotatingDeviceIDUniqueIDLength >= ConfigurationManager::kMinRotatingDeviceIDUniqueIDLength,
                  "Length of unique ID for rotating device ID is smaller than minimum.");
    constexpr uint8_t uniqueId[] = CHIP_DEVICE_CONFIG_ROTATING_DEVICE_ID_UNIQUE_ID;

    ReturnErrorCodeIf(sizeof(uniqueId) > uniqueIdSpan.size(), CHIP_ERROR_BUFFER_TOO_SMALL);
    ReturnErrorCodeIf(sizeof(uniqueId) != ConfigurationManager::kRotatingDeviceIDUniqueIDLength, CHIP_ERROR_BUFFER_TOO_SMALL);
    memcpy(uniqueIdSpan.data(), uniqueId, sizeof(uniqueId));
    uniqueIdSpan.reduce_size(sizeof(uniqueId));
    return CHIP_NO_ERROR;
#endif
    return err;
}

} // namespace DeviceLayer
} // namespace chip
